{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "RL_Assignment_2_Taxi.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "OD1HJLP49scn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "from matplotlib import pyplot as plt\n",
        "import pprint\n",
        "import pandas as pd\n",
        "import random"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cOW0xqkJNU0c",
        "colab_type": "text"
      },
      "source": [
        "I am implementing value iteration and policy iteration algorithms as given in Chapter 4 of **'Reinforcement Learning: An Introduction' by Sutton and Barto.**\n",
        "(Figure 4.3:Policy Iteration and Figure 4.5:Value Iteration)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XuSHkWizCQcw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "##Initializing the states\n",
        "## States are basically the towns\n",
        "States = ['A', 'B', 'C']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hyENzDwIn3xs",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Initializing actions \n",
        "Actions = {}\n",
        "Actions['A'] = [1, 2, 3]\n",
        "Actions['B'] = [1, 2]\n",
        "Actions['C'] = [1, 2, 3]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8fc5X8cRoSZp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "9d89635e-0fd4-4d6c-c342-721072fa1ac1"
      },
      "source": [
        "# Implementing the reward function.\n",
        "# Reward function g. \n",
        "Rewards = {}\n",
        "Rewards['A'] = np.array([[10 , 4, 8], \n",
        "                        [8, 2, 4],\n",
        "                        [4 , 6, 4]])\n",
        "Rewards['B'] = np.array([[14 , 0, 18], \n",
        "                        [8, 16, 8]])\n",
        "\n",
        "Rewards['C'] = np.array([[10 , 2, 8], \n",
        "                        [6, 4, 2],\n",
        "                         [4, 0, 8]])\n",
        "                         \n",
        "\n",
        "def g (s, a, sf):\n",
        "  return Rewards[s][a-1][ord(sf) - ord('A')]\n",
        "\n",
        " #Sanity check for reward function\n",
        "print(g('A',3, 'B'))\n",
        "print(g('C', 2, 'B'))\n"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "6\n",
            "4\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L9rZ2MOwCbzq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "319ae546-bedd-4109-e83c-e6da83113344"
      },
      "source": [
        "## Implementing probablity function\n",
        "\n",
        "Prob = {}\n",
        "Prob['A'] = np.array([[1/2 , 1/4, 1/4], \n",
        "                        [1/ 16, 3/4, 3/16],\n",
        "                        [1/4 , 1/8, 5/8]])\n",
        "Prob['B'] = np.array([[1/2 , 0, 1/2], \n",
        "                        [1/ 16, 7/8, 1/16]])\n",
        "\n",
        "Prob['C'] = np.array([[1/4 , 1/4, 1/2], \n",
        "                        [1/ 8, 3/4, 1/8],\n",
        "                        [3/4 , 1/16, 3/16]])\n",
        "\n",
        "def p (s, a, sf):\n",
        "  return Prob[s][a-1][ord(sf) - ord('A')]\n",
        "\n",
        "#Sanity Check\n",
        "print (p ('B', 2, 'B'))\n"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.875\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7Z88GLDsNTMZ",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yd3fg07JSruU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D8HJj7PdNbTN",
        "colab_type": "text"
      },
      "source": [
        "I am modelling the problem as an infinite horizon problem therefore the policy only depends on the states.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YNCt9p1Z85Qc",
        "colab_type": "text"
      },
      "source": [
        "The cell below implements value iteration as the function of beta (discount factor). \n",
        "\n",
        "I am going to implement value iteration. I am implementing the **Gauss-Seidel method (Asynchronous value iteration)** since it is more natural to implement when we are not doing any parallel processing. (Fig 4.5 Introduction to Reinforcement Learning, Sutton and Barto)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VgOCOHXySxBz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def value_iteration(beta):\n",
        "  ## Initializing v with zeros. (Here v is J basically) \n",
        "  v = {}\n",
        "  v['A'] = 0\n",
        "  v['B'] = 0\n",
        "  v['C'] = 0\n",
        "  ## Poilcy pi is also a dictionary (state : action)\n",
        "  pi = {}\n",
        "\n",
        "  while (True):\n",
        "    delta = 0\n",
        "\n",
        "    for s in States:\n",
        "      \n",
        "      prev_v = v[s]\n",
        "      max_val = -183303 # -inf\n",
        "      \n",
        "      for a in Actions[s]:\n",
        "          \n",
        "          val = 0\n",
        "          \n",
        "          for sf in States:\n",
        "            # print (s, a, sf)\n",
        "            val += p(s, a, sf)*(g(s, a, sf) + beta * v[sf])\n",
        "          \n",
        "          if (val > max_val):\n",
        "            max_val = val\n",
        "            pi[s] = a\n",
        "          \n",
        "      v[s] = max_val\n",
        "      delta = max(delta, abs(max_val - prev_v))\n",
        "\n",
        "    # print(delta)\n",
        "    if (delta == 0):\n",
        "      return (v, pi)\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DNfzoTowO31p",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# value iteration for different betas\n",
        "# And converting to dataframe for better tabulation\n",
        "\n",
        "ValItResults = {}\n",
        "piItResults = {}\n",
        "for b in range (0, 96, 5):\n",
        "  beta = b /100\n",
        "  # print(beta ,value_iteration(beta))\n",
        "  v, pi = value_iteration(beta)\n",
        "  ValItResults[beta] =  v  \n",
        "  piItResults[beta] = pi\n",
        "\n",
        "df_J = pd.DataFrame(ValItResults).T\n",
        "\n",
        "\n",
        "df_PI = pd.DataFrame(piItResults).T\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2kkLrE-KC3cj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 669
        },
        "outputId": "5030a06f-1f18-4056-9ea4-04be3178515f"
      },
      "source": [
        "df_J"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0.00</th>\n",
              "      <td>8.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>7.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.05</th>\n",
              "      <td>8.511527</td>\n",
              "      <td>16.400260</td>\n",
              "      <td>7.498869</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.10</th>\n",
              "      <td>9.076506</td>\n",
              "      <td>16.856369</td>\n",
              "      <td>8.050865</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.15</th>\n",
              "      <td>9.708121</td>\n",
              "      <td>17.464503</td>\n",
              "      <td>8.669160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.20</th>\n",
              "      <td>10.437030</td>\n",
              "      <td>18.482143</td>\n",
              "      <td>9.384398</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.25</th>\n",
              "      <td>11.274074</td>\n",
              "      <td>19.629630</td>\n",
              "      <td>10.207407</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.30</th>\n",
              "      <td>12.243837</td>\n",
              "      <td>20.934066</td>\n",
              "      <td>11.162756</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.35</th>\n",
              "      <td>13.378714</td>\n",
              "      <td>22.430769</td>\n",
              "      <td>12.282824</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.40</th>\n",
              "      <td>14.722222</td>\n",
              "      <td>24.166667</td>\n",
              "      <td>13.611111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.45</th>\n",
              "      <td>16.334131</td>\n",
              "      <td>26.205534</td>\n",
              "      <td>15.207371</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.50</th>\n",
              "      <td>18.298701</td>\n",
              "      <td>28.636364</td>\n",
              "      <td>17.155844</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.55</th>\n",
              "      <td>20.789989</td>\n",
              "      <td>31.607397</td>\n",
              "      <td>19.830725</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.60</th>\n",
              "      <td>24.025686</td>\n",
              "      <td>35.327724</td>\n",
              "      <td>23.458813</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.65</th>\n",
              "      <td>28.276692</td>\n",
              "      <td>40.096281</td>\n",
              "      <td>28.129979</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.70</th>\n",
              "      <td>34.061931</td>\n",
              "      <td>46.435416</td>\n",
              "      <td>34.366041</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.75</th>\n",
              "      <td>42.317411</td>\n",
              "      <td>55.285054</td>\n",
              "      <td>43.106317</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.80</th>\n",
              "      <td>55.079365</td>\n",
              "      <td>68.558201</td>\n",
              "      <td>56.269841</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.85</th>\n",
              "      <td>77.246512</td>\n",
              "      <td>90.811701</td>\n",
              "      <td>78.433456</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.90</th>\n",
              "      <td>121.653471</td>\n",
              "      <td>135.306276</td>\n",
              "      <td>122.836903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.95</th>\n",
              "      <td>255.022908</td>\n",
              "      <td>268.764619</td>\n",
              "      <td>256.202849</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "               A           B           C\n",
              "0.00    8.000000   16.000000    7.000000\n",
              "0.05    8.511527   16.400260    7.498869\n",
              "0.10    9.076506   16.856369    8.050865\n",
              "0.15    9.708121   17.464503    8.669160\n",
              "0.20   10.437030   18.482143    9.384398\n",
              "0.25   11.274074   19.629630   10.207407\n",
              "0.30   12.243837   20.934066   11.162756\n",
              "0.35   13.378714   22.430769   12.282824\n",
              "0.40   14.722222   24.166667   13.611111\n",
              "0.45   16.334131   26.205534   15.207371\n",
              "0.50   18.298701   28.636364   17.155844\n",
              "0.55   20.789989   31.607397   19.830725\n",
              "0.60   24.025686   35.327724   23.458813\n",
              "0.65   28.276692   40.096281   28.129979\n",
              "0.70   34.061931   46.435416   34.366041\n",
              "0.75   42.317411   55.285054   43.106317\n",
              "0.80   55.079365   68.558201   56.269841\n",
              "0.85   77.246512   90.811701   78.433456\n",
              "0.90  121.653471  135.306276  122.836903\n",
              "0.95  255.022908  268.764619  256.202849"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xJHSSHPIQih3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 669
        },
        "outputId": "9e128961-8148-405e-e8d7-186596d9a8a3"
      },
      "source": [
        "df_PI"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0.00</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.05</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.10</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.15</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.20</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.25</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.30</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.35</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.40</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.45</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.50</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.55</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.60</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.65</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.70</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.75</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.80</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.85</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.90</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.95</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      A  B  C\n",
              "0.00  1  1  1\n",
              "0.05  1  1  1\n",
              "0.10  1  1  1\n",
              "0.15  1  2  1\n",
              "0.20  1  2  1\n",
              "0.25  1  2  1\n",
              "0.30  1  2  1\n",
              "0.35  1  2  1\n",
              "0.40  1  2  1\n",
              "0.45  1  2  1\n",
              "0.50  1  2  1\n",
              "0.55  1  2  2\n",
              "0.60  1  2  2\n",
              "0.65  1  2  2\n",
              "0.70  1  2  2\n",
              "0.75  1  2  2\n",
              "0.80  2  2  2\n",
              "0.85  2  2  2\n",
              "0.90  2  2  2\n",
              "0.95  2  2  2"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qtg6CNCgQ55t",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HL3pjWEVQ6xl",
        "colab_type": "text"
      },
      "source": [
        "Now we will be implementing Q-Learning and TD-learning! For this we will write a function take_action(s, a) which will return the return the final state with given probabilities. We will also need a probabilistic function to implement epsilon greedy selection.`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RiE4E7XyQmp5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "fac20c34-5fa6-4482-b6cd-29196bde92f9"
      },
      "source": [
        "def take_action (s, a):\n",
        "  rnd = random.uniform(0, 1)\n",
        "  cum_prob = 0;\n",
        "  for sf in States:\n",
        "    if (rnd >= cum_prob and rnd <= cum_prob + p(s, a, sf)):\n",
        "      return (sf, g(s, a, sf) )\n",
        "    else: \n",
        "      cum_prob += p(s, a, sf)\n",
        "\n",
        "#Sanity Check\n",
        "print(take_action('B', 1))"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "('C', 18)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3BNA-d7JUwWu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Here we implement episilon_greedy\n",
        " epsilon = 0.2 # We can change this \n",
        "\n",
        "def epsilon_greedy (q, s):\n",
        "  k = len(Actions[s])\n",
        "  max_q = -13313 # -inf \n",
        "  A_max = 1\n",
        "  for a in Actions[s]:\n",
        "    if (q[s][a] > max_q):\n",
        "      A_max = a\n",
        "      max_q = q[s][a]\n",
        "  rnd = random.uniform(0, 1)\n",
        "  if (rnd < (1 - epsilon)):\n",
        "    return A_max\n",
        "  cum_prob = (1 - epsilon)\n",
        "  for a in Actions[s]:\n",
        "    if (rnd > cum_prob and rnd <= cum_prob + epsilon/k):\n",
        "      return a\n",
        "    else: \n",
        "      cum_prob += epsilon/k\n",
        "\n",
        "  return A_max\n",
        "\n",
        "\n",
        "  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7XCcHFjThknc",
        "colab_type": "text"
      },
      "source": [
        "The following cell implements q-learning (off policy) as given in Fig 6.12 (Introduction to Reinforcement Learning, Sutton and Barto)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fcSwC8aeWLI9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "alpha = 0.3 # Learning rate \n",
        "\n",
        "def q_learning (beta):\n",
        "  Q = {}\n",
        "  #Initializing Q\n",
        "  for s in States:\n",
        "    Q[s] = {}\n",
        "    for a in Actions[s]:\n",
        "      # Q[s][a] = random.uniform(0, 1)\n",
        "      Q[s][a] = 0\n",
        "\n",
        "  for i in range(100): #100 episodes\n",
        "    S = random.choice(States)\n",
        "    for j in range(1000): #Since we don't have a termination state we go for finite steps.\n",
        "      A = epsilon_greedy(Q, S)\n",
        "      (Sf, R) = take_action (S, A)\n",
        "      max_q = - 73931 # -inf\n",
        "      for a in Actions[Sf]:\n",
        "        max_q = max(max_q, Q[Sf][a])\n",
        "      \n",
        "      Q[S][A] = Q[S][A] + alpha*(R + beta*max_q - Q[S][A]) # This is the update\n",
        "      S = Sf\n",
        "\n",
        "  return Q\n",
        "\n",
        "  \n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f-hnQWVPfOoO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "422d6245-cde4-40e8-cff8-1677ab492144"
      },
      "source": [
        "print (q_learning(0.95))"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'A': {1: 238.4682534172665, 2: 261.5093062953193, 3: 230.59803065734576}, 'B': {1: 259.1562902366186, 2: 277.5975221654783}, 'C': {1: 237.48769638607064, 2: 258.2038925327579, 3: 237.44959233180808}}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0eE0_PKlfgqH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MmolVscaG7rQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3clAAwWYG75A",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XkZNOHrxG8Wy",
        "colab_type": "text"
      },
      "source": [
        "Now we will implement TD(lambda) learning. (We will work with lambda = 0.5). \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vhL4n9H-HVZH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def TD_learning (beta, lambda):\n",
        "  V = {}\n",
        "  e = {}\n",
        "  pi = {}\n",
        "  #Initializing V and s and pi\n",
        "  for s in States:\n",
        "    V[s] = random.uniform(0, 1)\n",
        "    e[s] = 0\n",
        "    pi[s] = 2 #Questions asks to initialize with 2.\n",
        "    \n",
        "  for i in range(100): #100 episodes\n",
        "    S = random.choice(States)\n",
        "    for j in range(1000): #Since we don't have a termination state we go for finite steps.\n",
        "      A = pi[S]\n",
        "      (Sf, R) = take_action (S, A)\n",
        "      max_q = - 73931 # -inf\n",
        "      for a in Actions[Sf]:\n",
        "        max_q = max(max_q, Q[Sf][a])\n",
        "      \n",
        "      Q[S][A] = Q[S][A] + alpha*(R + beta*max_q - Q[S][A]) # This is the update\n",
        "      S = Sf\n",
        "\n",
        "  return Q\n"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}